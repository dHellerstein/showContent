April 2021. Daniel Hellerstein (danielh@crosslink.net)

Description of wsShowContent library -- a front-end to wsMoveBoxes

These functions are used to dynamically write content (HTML or text) to a moveable/resizeable DIV (or other container).
The notion: one creates a container (such as a DIV)  which we call a "showContent" container
     This container has content you would like the end user to be able to move, or resize.
     And it can be dynamically updated!

Notes:
   * wsShowContent requires wsMoveBoxes.js and jQuery
   * testWsShowContent.html contains a demo of wsShowContent

I. Installing

 wsShowContent uses jQuery and a few other libraries

 Hence,  use the following in your html file:

  <script type="text/javascript" src="jquery-3.6.0.min.js"></script>    <!-- or your preferred version of jQuery  -->
  <script type="text/javascript" src="wsMoveBoxes.js"></script>
  <script type="text/javascript" src="wsShowContent.js"></script>

II. Basic useage

 In a javascript function (say, an .onLoad function), call:

    wsShowContent.init('anId',optsInit)

  where
        anId : the id of a container (a DIV) that will created. This is where content will be written to.
              If anId=0 or '',  or if no arguments are used (that is, wsShowContent.init() is called),
              an id of 'ws_showContent_main' is used.

              You can create multiple, independent, "showContent" containers by calling wsShowContent.init with different ids.

        optsInit: an associative array with a number of options. If not speciifed, defaults are used.  See below for more details

  This will create, and add to the bottom of the html document, a container with an id of  "anId", that is setup to be a moveable box
  (using some default options).

     *  This container has an upper "header" -- usually 1 em high --that is not scrollable.
     *  And a lower "content" -- using the rest of the container -- that is scrollable.

  After creating this showContent box, you can add content to it using
    wsShowContent.content(yourHtmlStuff,'anid')
  And you can immediately hide it using
    wsShowContent.hide('anid');
  And redisplay it with:
    wsShowContent.show('anid');

  In addition to "moveable box" controls (resize, etc) -- a few other controls can be added to the header row. These include
  "scroll to top of content" button, and "view prior or next" content icons.

       *** Please see wsMoveBoxes.txt for a list of the moveable-box options  ***

  It is easy to create several different, and independent,showContent containers. Just be sure ...
      * to specify unique ids
      * it is wise to specify a different screen location for each one -- so they do not overlap.
      * be careful when you use ws_showContent to write content to these containers -- you must specify an 'id' in the options (see below).


IIa. Writing dynamic content : the basics

  After wsShowContent.init is called, a "moveable box" is created -- one with a "header" containing default icons, and an empty "contents"

  You can then write text or html to the "header" and  "contents" area.
  Often, this content is dynamic-- say, it changes as a user interacts with forms.

  To write contents (do not change headers):
         eobj= wsShowContent.content(acontent,aid)
   where
         aContent: any text or html content
         aid :   the id (or jQuery object) of the showContent box

    To append to existing content:   wsShowContent.content(acontent,aid,1)

  and to write to "transient" headers (do not change content)
         eobj= wsShowContent.header(aheader,aid)
     where
         aheader: any text or html content. The header area is typically 1em high -- so the header should not be long
         aid :   the id (or jQuery object) of the showContent box

   Notes:
     * wsShowContent.headers() is a synonym for wsShowContent.header()
     * eobj is the jQuery object of the showContent box that used
     * To just write content (or a header) to the "default" showContent container (id="ws_showContent_main"), aid need not be specified.
     * .header() updates the "transient" headers.
       The "permanent" headers are specified by wsShowContent.init().  The permanent headers are never changed!
     * If you write HTML to a showContent that is malformed, or has odd features (such as calling javascript scripts), you could break things!


IIb. Writing dynamic content: all options

 wsShowContent supports a number of options when displaying content and headers.
 These are supported by wsShowContent.write()

 The syntax is:
         eobj= wsShowContent.write(acontent,optsContent)
   where
         aContent: any text or html content
         optsContent :  an associative array with a number of different options

II.a.2 Options specified in optsContent:

        id: an id. The id of the showContent container (as specified in wsShowContent.init). Or a jQuery object.
            If not specified, the default ('ws_showContent_main') id is used.

       append:  If 1, append aContent to the bottom of the 'content' area. If not 1 (or if not specified), aContent overwrites
                  anything in the 'content' area. Note that wsShowContent.content() will overwrite.

       contentOnly: If 1, the content area is updated (either rewritten, or appended to). The headers area is NOT changed.
                    If not specified, of if 0, the transient headers are removed.
                    This is similar to using content()

       doMinimize: If not 0, enable a "minimize" button (default is 0) in the headers.
                      If this is specified, you MUST specify an element in 'headers' (see below for details)
                      If '1', the value of the button is not changed. Otherwise it is set to the value of doMinimize
                   Example:  'doMinimize':'Minimize!'
                  See below for setup details.


      events: an array of "event" specificatons.
               Each row in the array is a 3 element array with components: 'eventType', 'domString', afunction

               After loading the content, event handlers will be assigned to elements (in aContent) that match a domString.
               Note" afunction should be a pointer to a function, and NOT a string with the function's name.

               For example, if events is a one row array:
                   events[0]=['click','.myHelpButtons',myHelpFunction]
               Then
                 a) All elements (in aContent) with a class='myHelpbuttons' are found
                 b) A .on('click',myHelpFunction) is assigned to each of these.
               Typically, these elements will contain attributes that myHelpFunction will use.

    foreGround: name attribute to assign a "move to foreground, RMB to move to background" button (in the current showContent box -- headers and content).
                For example, you could include
                   <input type="button" name="moveFore" value="uArr;" title="click to move to foreground"> ';

                   and 'foreGround':'moveFore'
                   
                   This complements the zIndexShow option of wsMoveBoxes -- it used to place a button in the content (or header) areas.

      headers: If specified, can be any html or text content (though it should fit on one line).
                 This is displayed in the "transient" headers area -- after the permanent headers.
                 This is only displayed on this call to ws_showContent -- on subsequent calls these headers are erased (or overwritten)
                 
                 Specifying 'headers' allows both content and headers to be updated in one call (rather than seperate calls to 
                 content() and headers().

       noHeader : If 1, do NOT display the 'header' area (both permanent and transient headers). Otherwise, the 'header' area is displayed.

       noHeaderPerm: If 1, do NOT display the headers created by wsShowContent.init. This is typically the closer, history, and the scroll icons -- but
                     may include any other "permanent" headers.
                     Transient headers WILL be displayed (as described below)


II.d Special actions

  You can retrieve information, or do some special actions, on showContent boxes, using wsShowContent.actions()

       ares=wsShowContent.actions(aid,theAction,actionOpt,actionOpt2)

  where aid is as above.

  The supported actions (theAction) are (some of them use actionOpt and actionOpt2)

   dom:    Return a jQuery object, that points to the  contents of the 'content'  area.

          Note that a basic call to ws_showContent (such as wsShowContent.write('my string ',{'id':'storyBox'}))
          will return the jQuery object pointing to the parent showContent container -- that contains the "content area" returned by 'dom'.

   dims :  If actionOpt=1, return a 2 element array containing [width,height] of the content area (in pixels)
          If actionOpt=2, same, but return as em (calculated using css font-size)

   get: actionOpt should be 'content' or 'header'. Return the html contents of the 'content' or 'header' area .
        If actionOpt='header', actionOpt2 is used:
           't' : return the transient headers
           'p' : return the 'permanent' headers
           otherwise: return bothI

   hide (or close):   Hide the showContent container -- an alternative to wsShowContent.hide();
            Whatever content was previously written (to this showContent) container will still not be changed, but the container will not be displayed.
              If actionOpt>1, then a fadeOut (rather than a simple hide) is used.
              The value should be the number of milliseconds the fadeOut will take (using the "linear" easing method of jQuery .fadeOut);

              This is an alternative to wsShowContent.close()


   onTop (or top) : Change z-index of the showContent container.
         actionOpt should  be 0, 1, or -1.
             0 : The default. Do NOT change z-index
             1 : Move to foreground -- will be above all other show content (and moveBox) containers
             -1 : Move to background -- will be below all other show content (and moveBox) containers

            The 1 and -1 options simulate clicking on the moveBox zIndexShow button
            

   show (or open):   Show the showContent container    -- an alternative to wsShowContent.show()
            Whatever content was previously written (to this showContent) container will still be there.
           Special values:
              If actionOpt>1, then a fadeIn (rather than a simple show) is used.
              The value should be the number of milliseconds the fadein will take (using the "linear" easing method of jQuery .fadeIn);


    toggle: Toggle between showing, and hiding.
              Values of 1, or > 1. If  > 1, a fade in or a fadeout is done.
              Basically: toggle examines the visiblity of the contentBox, and then "calls" show or hide.

      visible: If 1, return a 0/1  flag. 0: show content box is NOT visible. 1: is visible.


IIb. Fields of optsInit (in wsShowContent.init)

     Most of indices that can be specified in opts will control the setup of the "moveable box".
           These are: top, left, width, height, escapeOrder, expandBox, zIndexShow, callFunc, noCloser, noResizer, noHider, noMover
      wsMoveBoxes.txt explains these in detail.

      In general, it is not necessary to specify these options -- the defaults (used by wsShowContent.init) are recommended.

      However:
        * if you specify multiple showContent containers, you should specify the top and left options (so they don't overlap too much)

        * callFunc may be useful.
           'callFunc':  'funcName, title'  : funcName is a string specifying a function to call when a double arrow icon is clicked
                        (in the moveable box NE corner), and title is the title displayed for this double arrow.
                        Note that when funcName is called, it passed a jQuery object pointing to the moveAble window.

        If not specified, 'ws_showContent_toWindow,show content in a new window' is used -- this will show the content area in a new window

        To suppress this "show content in a new window" default, use 'callFunc':0

     The options directly used by wsShowContent.init are:

         callFuncHistory : default of ''. Used when noHistory=0. That is: when the "history" buttons ARE displayed.
                 Should be the name (as a string) of a function that will be called AFTER the prior (or next)
                 content is (re) displayed. This will be called as:
                    window[callFuncHistory](e1,idire)
                      where:
                           * e1 is a pointer (a jQuery object) to the  "history" (forward or backward) button that was clicked.
                           * idire=1 means forward , idire=0 means backward,  button was clicked
                      *  called AFTER the previous (or next) content is (re) displayed.
                      *  The default (of '') is to NOT call any such function.

                  This can be used to reattach event handlers (which are NOT re stored on re display).

         enableEsc : The value of the escIndex. Or, enable ws_escapeHandler escape handler
             There are two modes: enable ws_showContent, or specify details used by ws_escapeHandler
             If enableEsc='0', nothing is done.
             The default is enableEsc='1'
             a) If '1'
                The ws_showContent escape handler is enabled.
                     If esc is entered anywhere (detected using a keyup event), a visible moveable box is closed.
                    For example: a moveable box created (and used) by wsShowContent.init!
                        * If no moveable boxes are visible, the keyup propagates up. If one is visible (and then hidden), the keyup does NOT propagate.
                        * If the keyup is not an esc key, the keyup propagates up.

                  Note that the order of execution of this keyup handler, relative to any other keyup handler assigned to the document, is indeterminate.
                   If you have complex keyup handlers, this may not work as expected.
                   
          b) If > 1.
             An "escIndex" attribute is added to the moveable box.
             This is used by the  ws_escapeHandler function.
             Higher values of "escIndex" are "hidden" first.
             
             Thus: if this value of enableEsc is used, you MUST also initalize ws_escapeHandler
             For example :  ws_escapeHandler('init');



         headers :  Default of ''.  Additional headers added to the "permanent" headers area.
                 Can be any text or html -- but  should be fairly short (and just one line)
                 These will always be displayed when  a wsShowContent is made visible.

         noCloser2 : Default of '0'. If '1', do NOT show an extra "close" button (at the start of the header).
                     Otherwise: a 'value,title,class' (in a csv) -- the value of the button, and its mouseover title  -- using a css class.
                     title and class are optional. If not specified: title='close', and no class is used.

                  Notes:
                      * the "noCloser" button is used to control the "close" button in the moveable box!
                      * This "extra" close button is for convenience -- the default moveBox close icon is small and out of the way,

         noHistory: Default of '0'. If '1', do NOT show the history (prior and next) icons.
                    The history buttons allow the user to view prior content written with ws_showContent

         noScroll: Default of '0'. If '1', do not show several  "scoll " buttons.
                   When enabled,  4 buttons are displayed toward the right end of the headers row.
                     An up, right, down, and left arrow.
                        * clicking one of them scrolls the content window 10px (about one row, or one space)
                        * RMB click scrolls to top/right border/ bottom/ left border
                        * A double click (2 clicks within a 1/4 second) scrolls 150 px

                     Note: noTopScroll is a synonym for noScroll. If both specified, noTopScroll is used.

         noShadow:  Default of '0'. If '1', do NOT display a "shadow" around the moveable box.

         zIndex: The z-index to assign to this box. If not specified, a value of "50" is used. Higher values are displayed on top of lower values.

                 Notes:
                   *  the zIndexShow option (used by ws_moveBoxes) can be used to display a "bring forward/ bring back" icon (to change
                      the z-index of a ws_showContent box on-the-fly.
                   *  the onTop option of ws_showContent can be used to "bring forward/bring back" a showContent container
                   *  z-index is a synonym for zIndex. If both specified, z-index is used.


III. Using the minimize and maximize features

   It is straightforward to include a "minmize" button in a showContent container.
   When clicked, this will:
     a) Read the current contents of the showContent container (that this minimize button is inside of)
     b) Show a "maximize" button that, when clicked, will redisplay this current contents (in this showContent container)

   Thus: one can minimize a container, look at something else, and then maxmize.
   And several versions can be simultaneously minimized (so that different content is displayed when one of several "maximize" buttons are clicked)

   How?
      a) Create a "transient"  (not permanaent) header that contains an element (say, an input elememt) that has:
           i) a class="ws_showContent_minimize_button"
          ii) a "where" element that points to (using its id) an element OUTSIDE of the showContent container.
        For example:
           'header':'<input type="button" class="ws_content_minimize_button" value="Minimize this" where="myMaximizeButton" >'

      b) Create a "maximize" button  -- outside of the showContent container -- with an id equal to this "where" attribute.

        For example:
            <span class="ws_showContent_maximize" id="myMaximizeButton" title="re display!" >&#8661;</span>

        Notes:
          * &#8661; is a double up/down arrow.
          * the  class="ws_showContent_maximize" is optional (it is a built in class that might be useful)

     c) Displaying the content you want minimizable, include this transient header AND the minnimize display option
           Example:  wsShowContent.write('my great stuff ',{'header':'minimize button','doMinimize':1} );
         Or, if you want to specify the displayed value of the minimize button, something like:
            Example:  wsShowContent.write('my great stuff ',{'header':'minimize button','doMinimize':'\ud83e\udc3d'} );
         will use a squooshed arrow.

          NOTE: To use an html entity, you must use a unicode value (not a &#nnnn; value).
                For example:
                   '\ud83e\udc3d' is &#129085; (upwards compressed arrow)
                  '\u2796'  is &#10134; (heavy minus sign)

     That's it. Be sure to include the "maximize" button somewhere it can be seen (after the showContent window is minimized)

     Note that if the where element does NOT match an element, an error message is shown.

IV. Other functions  -- NOT part of the wsShowContent.init object!   These are called as wsShowContent.funcname(args)

   eJquery=ws_showContent_find(adom,anid)

     Find element inside a showContent window.
        adom: jquery string to identify object.
             examples: '#myDIv', '[name="thisBoxButton"]',  '.hotLink'
       anid: id of the show content box to look within. If not specified, or '' or 0, use the default ('#ws_showContent_main')
             You do NOT have to preface "anid" with a "#", but it won't hurt if you do.

     eJquery is a jquery object (with length 0, if no match)

     example:
         e2=wsShowContent.find('[name="ndScheShw_helpViewer"]' ,'retsim_notesViewer');


  jQobj=ws_argJquery(ado)
     Returns a jquery object pointing to this ado argument... such as what element was clicked. 
     ado can be an event passed when to a function that is a jQuery assigned event handler.
     Or a "this" in a inLine click: i.e.  onClick="myFunc(this)" 
     Or a string (though this is not a typical usage)
     

  

Other functions in the wsShowContent_resize.js library contai

   wsShowContent_resizeMenu(athis)   -- provide the user with a menu from which she can select a new postion and a new size.

   Setup:
        <script type="text/javascript" src="wsShowContent_resize.js"></script>

   Usage:
    Inside of a showContent box (typically, in its header) include a button like:
          <input type="button" value="View resize menu!" onClick="wsShowContent_resizeMenu(this)">
    This will display a menu at the top of the content area. The user can close this, or select new position and size.

   **  Note: to use code to change showContent box and position, use the ws_moveBoxDoResize (see wsMoveBoxes.txt for the details)  **

   More details:
     A click handler to resize & reposition a showContent box. When clicked, a menu is displayed at the top of the content area of
     the showContent box. The user can specify top,left, height and width.   After confirming the change, the user closes
     this menu to return to prior content

     This click handler MUST be placed inside of the showContent box it is meant to change!  Otherwise, it won't know what container to change.
     When a user open this menu, he sees a form with the "current" size and position values as defaults.

      The size and position can be specified using pixels (i.e; 500px), em (i.e.; 25em), or % (i.e.; 50%) of the current window height (or width).

      Or, you can specify relative increase (over the "permanent" sizes) by  using '-xx' (for a decrease) of '+xx' for an increase.
      Where 'xx' is 'nnEm', 'nnPx', or 'nn%'.
      For example: if the current height is 500px, and you specify '+10%', the new size will be 550px.

      Note: 
        * to use code to change showContent box and position, use the ws_moveBoxDoResize (see wsMoveBoxes.txt for the details)



